<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/task    
    http://www.springframework.org/schema/task/spring-task-4.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-lazy-init="false">
	<context:component-scan base-package="com.dse.*">
	<!-- 排除 controller注解-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!--扫描配置文件-->
	<context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true"/>

	<!-- This Will Use CGLIB With High Performance -->
	<!-- 通知spring使用cglib而不是使用jdk生成代理的方法(此时aop可以拦截到controller),采用注解方式才需要 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<task:annotation-driven />

	<!-- spring辅助类 -->
	<!--<bean id="springContextHelper" class="com.dse.common.helper.SpringContextHelper" 
		/> -->

	<!--BeanPostProcessor -->
	<!-- <bean id="sessionFactoryBeanPostProcessor" class="com.dse.common.beanpostprocessor.DseSessionFactoryBeanProcessor" 
		/> -->

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="proxoolDataSource" />
	</bean>

	<!-- 使用Proxool来配置JDBC -->
	<bean id="proxoolDataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="alias">
			<value>dse-common</value>
		</property>
		<property name="driver">
			<value>${jdbc.driver_class}</value>
		</property>
		<property name="driverUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>

		<!-- 最大连接数（默认5个）,超过了这个连接数,再有请求时,就排在队列中等候 -->
		<property name="maximumConnectionCount">
			<value>70</value>
		</property>

		<!-- 最小连接数（默认2个） -->
		<property name="minimumConnectionCount">
			<value>3</value>
		</property>

		<!-- 最少保持的空闲连接数（默认2个） -->
		<property name="prototypeCount">
			<value>3</value>
		</property>

		<!-- 是否记录数据库的每一步操作 -->
		<property name="trace">
			<value>true</value>
		</property>

		<!-- 是否同时记录多个STUFF，会产生多个日志 -->
		<property name="verbose">
			<value>true</value>
		</property>

		<!-- proxool自动侦察各个连接状态的时间间隔（毫秒）,侦察到空闲的连接就马上回收,超时的销毁 默认30秒 -->
		<property name="houseKeepingSleepTime">
			<value>90000</value>
		</property>

		<!-- 保持数据库连接所使用的SQL语句 -->
		<property name="houseKeepingTestSql">
			<value>getdate()</value>
		</property>
	</bean>


	<bean id="dse_common_sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="proxoolDataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.connection.provider_class">org.hibernate.connection.ProxoolConnectionProvider 
					</prop> -->
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}
				</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.connection.useUnicode">${hibernate.connection.useUnicode}</prop>
				<prop key="hibernate.connection.characterEncoding">${hibernate.connection.characterEncoding}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<!--<prop key="hibernate.default_schema">${hibernate.default_schema}</prop> -->
				<!-- 缓存配置 (memcached)start -->

				<!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> <prop 
					key="hibernate.cache.use_structured_entries">true</prop> <prop key="hibernate.cache.use_query_cache">false</prop> 
					<prop key="hibernate.cache.provider_class">com.googlecode.hibernate.memcached.MemcachedCacheProvider 
					</prop> <prop key="hibernate.memcached.memcacheClientFactory">net.rubyeye.xmemcached.utils.hibernate.XmemcachedClientFactory 
					</prop> <prop key="hibernate.cache.region.factory_class">com.googlecode.hibernate.memcached.MemcachedRegionFactory 
					</prop> <prop key="hibernate.memcached.servers">localhost:11211</prop> -->
				<!-- <prop key="hibernate.memcached.commandFactory"> net.rubyeye.xmemcached.command.TextCommandFactory 
					</prop> -->
				<!-- 二级缓存采用redis -->
				<prop key="hibernate.cache.use_second_level_cache">
					true
				</prop>
				<prop key="hibernate.cache.use_query_cache">
					true
				</prop>
				<prop key="hibernate.cache.region.factory_class">
					org.hibernate.cache.redis.RedisRegionFactory
				</prop>
				<!-- <prop key="redis.host"> localhost </prop> <prop key="redis.port"> 
					7777 </prop> -->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.dse</value>
			</list>
		</property>
		<property name="annotatedPackages">
			<list>
				<value>com.dse</value>
			</list>
		</property>
		<!-- <property name="eventListeners"> <map> <entry key="post-insert"> <ref 
			local="operationLogListener" /> </entry> <entry key="post-update"> <ref local="operationLogListener" 
			/> </entry> <entry key="post-delete"> <ref local="operationLogListener" /> 
			</entry> </map> </property> -->
		<!-- hibernate4没有此属性 <property name="eventListeners"> <map> <entry key="post-update"> 
			<ref bean="logAuditListener" /> </entry> </map> </property> -->
	</bean>

	<bean id="dse_common_transaction"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="dse_common_sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="dse_common_transaction" />

	<!-- 日志审计监听 -->
	<import resource="logAudit.xml" />

	<!-- 日志审计数据源 -->
	<import resource="applicationContext-log.xml" />

	<!-- 用于spring自定义标签的扩展 -->
	<import resource="applicationContext-ext.xml" />

	<!-- 切面定义(包括日志,过滤器等) -->
	<!-- <import resource="applicationContext-aspect.xml" /> -->
	<import resource="applicationContext-metering.xml"/>
	<import resource="applicationContext-tt.xml"/>
</beans>